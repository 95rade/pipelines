jobs:
- name: buildroot-tarmaker
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-tarmaker
      trigger: true
    - get: ubuntu-16.04
      params: {save: true}
      trigger: true
  - put: buildroot-tarmaker-image
    params:
      build: buildroot-tarmaker
      dockerfile: buildroot-tarmaker/Dockerfile.tarmaker
      load_base: ubuntu-16.04

- name: buildroot-base
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-images
      resource: buildroot-base
      trigger: true
    - get: buildroot
      trigger: true
    - get: buildroot-tarmaker-image
      params: {save: true}
      passed: [buildroot-tarmaker]
      trigger: true
  - task: build-image
    privileged: true
    file: buildroot-images/ci/build.yml
    params:
      FLAVOR: base
  - put: buildroot-base-image
    params: {build: image-root}

- name: buildroot-git
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-images
      resource: buildroot-git
      trigger: true
    - get: buildroot
      trigger: true
    - get: buildroot-tarmaker-image
      params: {save: true}
      passed: [buildroot-tarmaker]
      trigger: true
  - task: build-image
    privileged: true
    file: buildroot-images/ci/build.yml
    params:
      FLAVOR: git
  - put: buildroot-git-image
    params: {build: image-root}

- name: buildroot-curl
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-images
      resource: buildroot-curl
      trigger: true
    - get: buildroot
      trigger: true
    - get: buildroot-tarmaker-image
      params: {save: true}
      passed: [buildroot-tarmaker]
      trigger: true
  - task: build-image
    privileged: true
    file: buildroot-images/ci/build.yml
    params:
      FLAVOR: curl
  - put: buildroot-curl-image
    params: {build: image-root}

- name: buildroot-ruby
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-images
      resource: buildroot-ruby
      trigger: true
    - get: buildroot
      trigger: true
    - get: buildroot-tarmaker-image
      params: {save: true}
      passed: [buildroot-tarmaker]
      trigger: true
  - task: build-image
    privileged: true
    file: buildroot-images/ci/build.yml
    params:
      FLAVOR: ruby
  - put: buildroot-ruby-image
    params: {build: image-root}

- name: datadog-event-resource
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-base-image
      params: {save: true}
      passed: [buildroot-base]
      trigger: true
    - get: datadog-event-resource
      trigger: true
  - task: unit-and-build
    file: datadog-event-resource/build.yml
  - put: datadog-event-resource-image
    params:
      load_base: buildroot-base-image
      build: built-resource

- name: concourse-pipeline-resource
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-base-image
      params: {save: true}
      passed: [buildroot-base]
      trigger: true
    - get: concourse-pipeline-resource
      trigger: true
    - get: fly
      trigger: false
      params:
        globs: [fly_linux_amd64]
  - task: unit-and-build
    file: concourse-pipeline-resource/build.yml
  - put: concourse-pipeline-resource-image
    params:
      load_base: buildroot-base-image
      build: built-resource

- name: bosh-deployment-resource
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-ruby-image
      params: {save: true}
      passed: [buildroot-ruby]
      trigger: true
    - get: bosh-deployment-resource
      trigger: true
  - task: unit
    file: bosh-deployment-resource/build.yml
  - put: bosh-deployment-resource-image
    params:
      load_base: buildroot-ruby-image
      build: bosh-deployment-resource

- name: bump-bosh-deployment-resource
  serial: true
  public: true
  plan:
  - get: bosh-deployment-resource-image
    passed: [bosh-deployment-resource]
    params: {rootfs: true}
    trigger: true
  - get: bosh-deployment-resource
    passed: [bosh-deployment-resource]
  - get: concourse
  - task: bump-package
    input_mapping:
      resource-image: bosh-deployment-resource-image
      resource-repo: bosh-deployment-resource
    file: concourse/ci/bump-resource-package.yml
    params:
      RESOURCE_NAME: bosh-deployment-resource
      BOSH_PRIVATE_CONFIG: ((concourse_release_private_config))
  - put: concourse
    params: {repository: bumped-concourse, rebase: true}

- name: s3-resource
  serial: true
  plan:
  - aggregate:
    - get: buildroot-base-image
      params: {save: true}
      passed: [buildroot-base]
      trigger: true
    - get: s3-resource
      trigger: true
  - task: unit
    file: s3-resource/build.yml
    params:
      S3_TESTING_ACCESS_KEY_ID:  ((s3_resource_bucket.access_key))
      S3_TESTING_SECRET_ACCESS_KEY: ((s3_resource_bucket.secret_key))
      S3_TESTING_BUCKET: ((s3_resource.bucket))
      S3_VERSIONED_TESTING_BUCKET: ((s3_resource.versioned_bucket))
      S3_TESTING_REGION: ((s3_resource.region))
  - put: s3-resource-image
    params:
      load_base: buildroot-base-image
      build: built-resource

- name: bump-s3-resource
  serial: true
  plan:
  - get: s3-resource-image
    passed: [s3-resource]
    params: {rootfs: true}
    trigger: true
  - get: s3-resource
    passed: [s3-resource]
  - get: concourse
  - task: bump-package
    input_mapping:
      resource-image: s3-resource-image
      resource-repo: s3-resource
    file: concourse/ci/bump-resource-package.yml
    params:
      RESOURCE_NAME: s3-resource
      BOSH_PRIVATE_CONFIG: ((concourse_release_private_config))
  - put: concourse
    params: {repository: bumped-concourse, rebase: true}

- name: cf-resource
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-base-image
      params: {save: true}
      passed: [buildroot-base]
      trigger: true
    - get: cf-resource
      trigger: true
    - get: cf-cli
      trigger: true
    - get: autopilot
      trigger: true
  - aggregate:
    - task: autopilot-unit
      file: autopilot/build.yml
    - task: resource-unit
      file: cf-resource/build.yml
  - put: cf-resource-image
    params:
      load_base: buildroot-base-image
      build: built-resource

- name: bump-cf-resource
  serial: true
  public: true
  plan:
  - get: cf-resource-image
    passed: [cf-resource]
    params: {rootfs: true}
    trigger: true
  - get: cf-resource
    passed: [cf-resource]
  - get: concourse
  - task: bump-package
    input_mapping:
      resource-image: cf-resource-image
      resource-repo: cf-resource
    file: concourse/ci/bump-resource-package.yml
    params:
      RESOURCE_NAME: cf-resource
      BOSH_PRIVATE_CONFIG: ((concourse_release_private_config))
  - put: concourse
    params: {repository: bumped-concourse, rebase: true}

- name: semver-resource
  serial: true
  public: false # easy to leak bucket params
  plan:
  - aggregate:
    - get: buildroot-git-image
      params: {save: true}
      passed: [buildroot-git]
      trigger: true
    - get: semver-resource
      trigger: true
  - task: unit
    file: semver-resource/build.yml
    params:
      SEMVER_TESTING_ACCESS_KEY_ID: ((semver_resource_bucket.access_key))
      SEMVER_TESTING_SECRET_ACCESS_KEY: ((semver_resource_bucket.secret_key))
      SEMVER_TESTING_BUCKET: ((semver_resource.bucket))
      SEMVER_TESTING_REGION: ((semver_resource.region))
  - put: semver-resource-image
    params:
      load_base: buildroot-git-image
      build: built-resource

- name: bump-semver-resource
  serial: true
  public: false # easy to leak bucket params
  plan:
  - get: semver-resource-image
    passed: [semver-resource]
    params: {rootfs: true}
    trigger: true
  - get: semver-resource
    passed: [semver-resource]
  - get: concourse
  - task: bump-package
    input_mapping:
      resource-image: semver-resource-image
      resource-repo: semver-resource
    file: concourse/ci/bump-resource-package.yml
    params:
      RESOURCE_NAME: semver-resource
      BOSH_PRIVATE_CONFIG: ((concourse_release_private_config))
  - put: concourse
    params: {repository: bumped-concourse, rebase: true}

- name: tracker-resource
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildroot-git-image
      params: {save: true}
      passed: [buildroot-git]
      trigger: true
    - get: tracker-resource
      trigger: true
  - task: unit
    file: tracker-resource/build.yml
    params:
      TRACKER_TOKEN: ((tracker_resource.token))
  - put: tracker-resource-image
    params:
      load_base: buildroot-git-image
      build: built-resource

- name: bump-tracker-resource
  serial: true
  public: true
  plan:
  - get: tracker-resource-image
    passed: [tracker-resource]
    params: {rootfs: true}
    trigger: true
  - get: tracker-resource
    passed: [tracker-resource]
  - get: concourse
  - task: bump-package
    input_mapping:
      resource-image: tracker-resource-image
      resource-repo: tracker-resource
    file: concourse/ci/bump-resource-package.yml
    params:
      RESOURCE_NAME: tracker-resource
      BOSH_PRIVATE_CONFIG: ((concourse_release_private_config))
  - put: concourse
    params: {repository: bumped-concourse, rebase: true}

resources:
- name: datadog-event-resource
  type: git
  source:
    uri: https://github.com/concourse/datadog-event-resource.git
    branch: master

- name: concourse-pipeline-resource
  type: git
  source:
    uri: https://github.com/concourse/concourse-pipeline-resource.git
    branch: master

- name: tracker-resource
  type: git
  source:
    uri: https://github.com/concourse/tracker-resource.git
    branch: master

- name: cf-resource
  type: git
  source:
    uri: https://github.com/concourse/cf-resource.git
    branch: master

- name: s3-resource
  type: git
  source:
    uri: https://github.com/concourse/s3-resource.git
    branch: master

- name: semver-resource
  type: git
  source:
    uri: https://github.com/concourse/semver-resource.git
    branch: master

- name: bosh-deployment-resource
  type: git
  source:
    uri: https://github.com/concourse/bosh-deployment-resource.git
    branch: master

- name: bosh-deployment-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/bosh-deployment-resource

- name: datadog-event-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/datadog-event-resource

- name: concourse-pipeline-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/concourse-pipeline-resource

- name: tracker-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/tracker-resource

- name: cf-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/cf-resource

- name: s3-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/s3-resource

- name: semver-resource-image
  type: docker-image
  source:
    username: ((docker.username))
    password: ((docker.password))
    repository: concourse/semver-resource

- name: autopilot
  type: git
  source:
    uri: https://github.com/contraband/autopilot.git
    branch: master

- name: cf-cli
  type: s3
  source:
    bucket: cf-cli-releases
    region_name: us-west-1
    access_key_id: ((cli_bucket.access_key))
    secret_access_key: ((cli_bucket.secret_key))
    regexp: releases/v([\d\.]+)/cf-cli_.*_linux_x86-64.tgz

- name: concourse
  type: git
  source:
    uri: git@github.com:concourse/concourse.git
    branch: master
    private_key: ((concourse_repo_private_key))

- name: buildroot
  type: git
  source:
    uri: git://git.buildroot.net/buildroot
    tag_filter: '[0-9][0-9][0-9][0-9].[0-9][0-9]'

- name: buildroot-tarmaker
  type: git
  source:
    uri: https://github.com/concourse/buildroot-images.git
    branch: master
    paths: [Dockerfile.tarmaker]

- name: buildroot-tarmaker-image
  type: docker-image
  source:
    repository: concourse/buildroot-tarmaker
    username: ((docker.username))
    password: ((docker.password))

- name: buildroot-base
  type: git
  source:
    uri: https://github.com/concourse/buildroot-images.git
    branch: master
    paths: [base, ci]

- name: buildroot-base-image
  type: docker-image
  source:
    repository: concourse/buildroot
    tag: base
    username: ((docker.username))
    password: ((docker.password))

- name: buildroot-git
  type: git
  source:
    uri: https://github.com/concourse/buildroot-images.git
    branch: master
    paths: [git, ci]

- name: buildroot-git-image
  type: docker-image
  source:
    repository: concourse/buildroot
    tag: git
    username: ((docker.username))
    password: ((docker.password))

- name: buildroot-curl
  type: git
  source:
    uri: https://github.com/concourse/buildroot-images.git
    branch: master
    paths: [curl, ci]

- name: buildroot-curl-image
  type: docker-image
  source:
    repository: concourse/buildroot
    tag: curl
    username: ((docker.username))
    password: ((docker.password))

- name: buildroot-ruby
  type: git
  source:
    uri: https://github.com/concourse/buildroot-images.git
    branch: master
    paths: [ruby, ci]

- name: buildroot-ruby-image
  type: docker-image
  source:
    repository: concourse/buildroot
    tag: ruby
    username: ((docker.username))
    password: ((docker.password))

- name: ubuntu-16.04
  type: docker-image
  source:
    repository: ubuntu
    tag: "16.04"

- name: fly
  type: github-release
  check_every: 1h
  source:
    user: concourse
    repository: concourse
    access_token: ((concourse_github_dummy.access_token))
